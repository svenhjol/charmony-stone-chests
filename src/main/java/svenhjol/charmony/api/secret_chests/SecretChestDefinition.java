package svenhjol.charmony.api.secret_chests;

import com.mojang.datafixers.util.Pair;
import net.minecraft.core.BlockPos;
import net.minecraft.resources.ResourceKey;
import net.minecraft.util.RandomSource;
import net.minecraft.util.StringRepresentable;
import net.minecraft.world.level.WorldGenLevel;
import net.minecraft.world.level.storage.loot.LootTable;
import svenhjol.charmony.api.stone_chests.StoneChestMaterial;

import java.util.List;

public interface SecretChestDefinition extends StringRepresentable {
    /**
     * Name of this definition.
     * This will be used as a map key for this definition.
     */
    String name();

    /**
     * The chest material to use when placing the chest.
     */
    StoneChestMaterial material();

    /**
     * Placement method to use.
     * - Surface: land surface (with open sky) or ocean surface.
     * - Cave: air/water space within a cave.
     * - Buried: has solid block above and below.
     * - Fortress: inside Nether Fortress corridors.
     * - EndCity: scattered around End Cities.
     * - Bastion: scattered around Bastions.
     */
    SecretChestPlacement placement();

    /**
     * Loot tables to use for the chest contents when unlocked.
     * If more than one is specified, one is randomly chosen from the list.
     */
    List<ResourceKey<LootTable>> lootTables();

    /**
     * Min and max Y-level that the chest can be placed.
     * For surface placement, this provides a range where the chest will be placed if the surface is invalid.
     */
    default Pair<Integer, Integer> height() {
        return Pair.of(50, 70);
    }

    /**
     * Use this to increase the difficulty of locked chest puzzles
     * and the penalty for breaking the chest or failing the puzzle.
     */
    default int difficultyAmplifier() {
        return 1;
    }

    /**
     * Chance (out of 1.0) of trying to place a secret chest.
     */
    default double chance() {
        return 1.0d;
    }

    /**
     * Behavior when the chest is broken.
     * If more than one is specified, one is randomly chosen from the list.
     */
    default List<SecretChestSideEffects> sideEffects() {
        return List.of(SecretChestSideEffects.Nothing);
    }

    /**
     * IDs of the puzzle menus to use.
     * If empty the puzzle menu will not be used and the chest will not be locked.
     */
    default List<String> puzzleMenus() {
        return List.of();
    }

    /**
     * Get the definition name. Used when serializing the definition.
     */
    default String getSerializedName() {
        return name();
    }

    /**
     * If true, the chest will be buried in solid rock if a valid air/water space can't be found.
     * This has no effect if the placement type is "Buried".
     * Note that if false the chest might not be able to be placed at the structure coordinates.
     * This will show a debug message. Maps to the structure coordinates will show an X even though there is no chest.
     */
    default boolean canBeFullyBuried() {
        return true;
    }

    /**
     * The min and max offset that will be used when trying to place a chest if an airspace
     * can't be found at the structure coordinates. The higher this range, the greater the amount
     * of vertical deviation from the min and max depth.
     */
    default Pair<Integer, Integer> fallbackYOffset() {
        return Pair.of(-10, 10);
    }

    /**
     * The max X and Z offset that will be used when trying to place a chest if an airspace
     * can't be found at the structure coordinates. The higher this range, the greater the
     * amount of deviation from the position of the structure.
     */
    default int fallbackXZOffset() {
        return 4;
    }

    /**
     * If true, a valid position must be found in pre-placement i.e. at the coordinates generated by the world seed.
     * If false, a position will be calculated in post-placement if no favorable position is found in pre-placement.
     */
    default boolean strict() {
        return false;
    }

    /**
     * Hook to generate land underneath the target position.
     * This is called only if strict is false and the chest cannot be placed.
     * If this function is false then the chest will be buried if canBeFullyBuried is true.
     */
    default boolean generateSurface(WorldGenLevel level, BlockPos pos, RandomSource random) {
        return false;
    }

    /**
     * Hook to generate decoration at the world surface, if possible.
     */
    default void decorateSurface(WorldGenLevel level, BlockPos pos, RandomSource random) {}
}
